REMOTE_USER
	The authenticated user.
	
REDIRECT_REMOTE_USER
	The authenticated user if the request is internally redirected.
	
PHP_AUTH_DIGEST
	When doing Digest HTTP authentication this variable is set to the Authorization header sent by the client 
	(which you should then use to make the appropriate validation).
	
PHP_AUTH_USER
	When doing HTTP authentication this variable is set to the username provided by the user.
	
PHP_AUTH_PW
	When doing HTTP authentication this variable is set to the password provided by the user.
	
AUTH_TYPE
	When doing HTTP authentication this variable is set to the authentication type.
	I noted that $_SERVER['AUTH_TYPE'] is only available for a page that was authenticated through a traditional external mechanism (like Apache).
	
==========
============================(GREAT DESIGN: THIS IS ENVIRONMENT-UNSPECIFIC)
Application
	get/set DefaultCharacterEncoding
	get/set DefaultPage
	get/set DefaultExtension
	get/set ControllerPath
	get/set ListenerPath
	get/set WrapperPath
	get/set ViewsPath
	get/set AutoRouting
Listeners
	
Routes
	Route
		get/set Path
		get/set	Controller		
Formats
	Format
		get/set Extension		// mandatory
		get/set ContentType		// mandatory
		get/set Wrapper			// mandatory, unless wrapper @ 
=========================(SERVERS.XML: ENVIRONMENT SPECIFIC)
SERVERS >> DELEGATE ME!
	database
	caching
	queues
	mail
		'driver' => env('MAIL_DRIVER', 'smtp'),
		'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
    		'port' => env('MAIL_PORT', 587),
		'from' => ['address' => null, 'name' => null],
    		'encryption' => env('MAIL_ENCRYPTION', 'tls'),
    		'username' => env('MAIL_USERNAME'),
    		'password' => env('MAIL_PASSWORD'),
    		'sendmail' => '/usr/sbin/sendmail -bs',
CACHING SOLUTION
	apc
	array
	database
	file
	memcache(d) 
	redis
	...
FILESYSTEMS
	'default' => 'local'	// default filesystem disk used by framework (Supported: "local", "ftp", "s3", "rackspace")
	'cloud' => 's3'		// default cloud filesystem disk
	'disks' => [		// filesystem_disk
		'local' => [
		    'driver' => 'local',
		    'root' => storage_path('app'),
		],
		's3' => [
		    'driver' => 's3',
		    'key' => 'your-key',
		    'secret' => 'your-secret',
		    'region' => 'your-region',
		    'bucket' => 'your-bucket',
		],
	],
SESSIONS
	'driver' => env('SESSION_DRIVER', 'file'),	// Supported: "file", "cookie", "database", "apc", "memcached", "redis", "array"
    'lifetime' => 120,				// # of minutes session can remain idle until expires
   	'expire_on_close' => false,			// expire on browser closing
    'encrypt' => false,				// This option allows you to easily specify that all of your session data should be encrypted before it is stored.
	'files' => storage_path('framework/sessions'),	// When using the native session driver, we need a location where session files may be stored
	'cookie' => 'laravel_session'			// session cookie name
	'path' => '/'					// The session cookie path determines the path for which the cookie will be available. Typically: root path
	'domain' => null				// domain @ cookie 
	'secure' => false				// if true, session cookies will only be sent back to server if browser initiated a HTTPS connection. This keeps you from receiving unsigned cookies.
	'http_only' => true				// if true, will prevent JS from accessing value of cookie / cookie will only be accessible through HTTP
	(IF USING "database"/"redis"): "connection","table", etc